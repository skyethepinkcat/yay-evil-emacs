#+TITLE: Yay-Evil distro by Ian Y.E. Pan #+Author: Ian Y.E. Pan
#+Date: 2019
Welcome! This Emacs "distro" is based on my personal Emacs configuration (on GNU Emacs
26.3). It's unopinionated and was created for general use in mind. The package settings
are grouped in a logical manner, and I've documented as detailed as possible what each
code snippet does in this file.
* Settings without corresponding packages
Clean up the UI and enhance some basic defaults defined in "C Source Code". The variable
~ian/indent-width~ controls the default indentation across various programming modes. The
default is 4, you can change this variable to 2 or any other indentation width you prefer,
and the change will be made across all programming language modes including C, C++, Java,
Python etc. (Exception: JavaScript defaults to 2-space indent, you can still set it to any
other indentation width you prefer in the ~web-mode~ section.)
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :preface
    (defvar ian/indent-width 4) ; change this value to your preferred width
    (defvar skye/indent-width 2) ; change this value to your preferred width
    :config
    (setq frame-title-format '("Yay-Evil") ; Yayyyyy Evil!
          ring-bell-function 'ignore       ; minimize distraction
          frame-resize-pixelwise t
          default-directory "~/")

    (tool-bar-mode -1)
    (menu-bar-mode 1)

    ;; better scrolling experience
    (setq scroll-margin 0
          scroll-conservatively 101 ; > 100
          scroll-preserve-screen-position t
          auto-window-vscroll nil)

    ;; Always use spaces for indentation
    (setq-default indent-tabs-mode nil
                  tab-width skye/indent-width)

    ;; Omit default startup screen
    (setq inhibit-startup-screen t))

  ;; The Emacs default split doesn't seem too intuitive for most users.
  (use-package emacs
    :ensure nil
    :preface
    (defun ian/split-and-follow-horizontally ()
      "Split window below."
      (interactive)
      (split-window-below)
      (other-window 1))
    (defun ian/split-and-follow-vertically ()
      "Split window right."
      (interactive)
      (split-window-right)
      (other-window 1))
    :config
    (global-set-key (kbd "C-x 2") #'ian/split-and-follow-horizontally)
    (global-set-key (kbd "C-x 3") #'ian/split-and-follow-vertically)
    (global-set-key (kbd "C-x h") #'ian/split-and-follow-horizontally)
    )
#+END_SRC

* Configuration for built-in packages
Since we're using use-package as our package management system, we might as well try to
organize under the same syntax as much as possible to keep the configuration
consistent. The option ~use-package-always-ensure~ is turned on in ~init.el~, so we'll add
~:ensure nil~ when configuring the built-in packages.
** Modernize selection behavior
Replace the active region just by typing text, just like modern
editors.
#+BEGIN_SRC emacs-lisp
  (use-package delsel
    :ensure nil
    :config (delete-selection-mode +1))
#+END_SRC
** Disable scroll-bar
#+BEGIN_SRC emacs-lisp
  (use-package scroll-bar
    :ensure nil
    :config (scroll-bar-mode -1))
#+END_SRC
** Enable column numbers
#+BEGIN_SRC emacs-lisp
  (use-package simple
    :ensure nil
    :config (column-number-mode +1))
#+END_SRC
** File-related tweaks
Don't bother confirming killing processes and don't let backup~ files
scatter around.
#+BEGIN_SRC emacs-lisp
  (use-package files
    :ensure nil
    :config
    (setq confirm-kill-processes nil
          create-lockfiles nil ; don't create .# files (crashes 'npm start')
          make-backup-files nil))
#+END_SRC
** Automatically refreshes the buffer for changes outside of Emacs
Auto refreshes every 2 seconds. Don't forget to refresh the version
control status as well.
#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :ensure nil
    :config
    (global-auto-revert-mode +1)
    (setq auto-revert-interval 2
          auto-revert-check-vc-info t
          global-auto-revert-non-file-buffers t
          auto-revert-verbose nil))
#+END_SRC
** Eldoc: documentation in the mini-buffer
Slightly shorten eldoc display delay.
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :ensure nil
    :diminish eldoc-mode
    :config
    (setq eldoc-idle-delay 0.4))
#+END_SRC
** Mouse wheel (track-pad) scroll speed
By default, the scrolling is way too fast to be precise and helpful,
let's tune it down a little bit.
#+BEGIN_SRC emacs-lisp
  (use-package mwheel
    :ensure nil
    :config (setq mouse-wheel-scroll-amount '(2 ((shift) . 1))
                  mouse-wheel-progressive-speed nil))
#+END_SRC
** Show matching parentheses
Reduce the highlight delay to instantly.
#+BEGIN_SRC emacs-lisp
  (use-package paren
    :ensure nil
    :init (setq show-paren-delay 0)
    :config (show-paren-mode +1))
#+END_SRC
** Indentation improvement
For Java and C/C++, change the formatting style from GNU (the default)
to the more standard K&R. Here we also set the indentation width of C,
C++, Java, and Python to the preferred value defined in
~ian/indent-width~ (all languages default to 4, except JavaScript,
which is 2, as controlled in ~web-mode~). Of course, you can change
the value depending on the language as well.
#+BEGIN_SRC emacs-lisp
  ;; C, C++, and Java
  (use-package cc-vars
    :ensure nil
    :config
    (setq-default c-basic-offset skye/indent-width)
    (setq c-default-style '((java-mode . "java")
                            (awk-mode . "awk")
                            (other . "k&r"))))

  ;; Python (both v2 and v3)
  (use-package python
    :ensure nil
    :config (setq python-indent-offset ian/indent-width))
#+END_SRC
** Setting up some frame defaults
Maximize the frame by default on start-up. Set the font to size 12.
#+BEGIN_SRC emacs-lisp
  (setq skye/font-name "IBM Plex Mono")
  (use-package frame
    :preface
    (defun ian/set-default-font ()
      (interactive)
      (when (member skye/font-name (font-family-list))
        (set-face-attribute 'default nil :family skye/font-name))
      (set-face-attribute 'default nil
                          :height 120
                          :weight 'normal))
    :ensure nil
    :config
    (setq initial-frame-alist '((fullscreen . maximized)))
    (ian/set-default-font))
#+END_SRC

** Ediff tweaks
Enter ediff with side-by-side buffers to better compare the
differences.
#+BEGIN_SRC emacs-lisp
  (use-package ediff
    :ensure nil
    :config
    (setq ediff-window-setup-function #'ediff-setup-windows-plain)
    (setq ediff-split-window-function #'split-window-horizontally))
#+END_SRC
** Auto-pairing quotes and parentheses etc.
Electric-pair-mode has improved quite a bit in recent Emacs
versions. No longer need an extra package for this. It also takes care
of the new-line-and-push-brace feature.
#+BEGIN_SRC emacs-lisp
  (use-package elec-pair
    :ensure nil
    :hook (prog-mode . electric-pair-mode))
#+END_SRC
** Clean up whitespace on save
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :ensure nil
    :hook (before-save . whitespace-cleanup))
#+END_SRC
** Fill Column
#+begin_src emacs-lisp
    (setq-default fill-column 90)
#+end_src

** Dump custom-set-variables to a garbage file and don't load it
#+BEGIN_SRC emacs-lisp
                                          ;(use-package cus-edit
                                          ;  :ensure nil
                                          ;  :config
                                          ;  (setq custom-file (concat user-emacs-directory "to-be-dumped.el")))
#+END_SRC
** Dired tweaks
Delete intermediate buffers when navigating through dired.
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :config
    (setq delete-by-moving-to-trash t)
    (eval-after-load "dired"
      #'(lambda ()
          (put 'dired-find-alternate-file 'disabled nil)
          (define-key dired-mode-map (kbd "RET") #'dired-find-alternate-file))))
#+end_src
** Tabs
#+begin_src emacs-lisp
  (setq tab-bar-show 0)

  (global-set-key (kbd "C-<next>") 'tab-next)
  (global-set-key (kbd "C-<prior>") 'tab-previous)
#+end_src
* Third-party packages
Many Emacsers love having tons of packages -- and that's absolutely
fine! However, one of the goals of the Yay-Evil distro is to provide
an essential-only foundation for users to build upon. Therefore, only
the most important packages and/or lightweight improvements will be
included here. For example, completion frameworks like Ivy or Helm are
considered heavy by many, yet the built-in Ido serves almost the same
purpose. The only arguably opinionated package is probably Evil, but
you probably saw that coming from the distro name, didn't you ;) ? If
you prefer the default keybindings, simply disable the section that
controls the Evil behaviors.

Normally, we need to add ~:ensure t~ to tell ~use-package~ to download packages when it's not available. But since we've added ~use-package-always-ensure~ in ~init.el~, we can omit it.
** GUI enhancements
*** Load custom theme
#+BEGIN_SRC emacs-lisp
 ;(use-package vscode-dark-plus-theme
 ;  :ensure t
 ;  :config
 ;  (load-theme 'vscode-dark-plus t))
  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-dracula t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
                                          ;(setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+END_SRC

*** Dashboard welcome page
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 'logo
          dashboard-banner-logo-title "Skyenetmacs"
          dashboard-items nil
          dashboard-set-footer nil))
#+END_SRC
*** Syntax highlighting
Lightweight syntax highlighting improvement for numbers and escape
sequences (e.g. ~\n, \t~).
#+BEGIN_SRC emacs-lisp
  (use-package highlight-numbers
    :hook (prog-mode . highlight-numbers-mode))

  (use-package highlight-escape-sequences
    :hook (prog-mode . hes-mode))
#+END_SRC
*** Layouts
#+begin_src emacs-lisp
  (use-package eyebrowse)
#+end_src
** Vi keybindings
I personally find Vi(m) bindings to be the most efficient way of
editing text (especially code). +I also changed the default ~:q~ and
~:wq~ to be killing current buffer, instead of killing the frame or
subsequently killing Emacs.+ I find this functionality very annoying
so I changed it back.
#+BEGIN_SRC emacs-lisp
  (use-package undo-fu)
  (use-package evil
    :diminish undo-tree-mode
    :init
    (setq evil-want-C-u-scroll t
          evil-want-keybinding nil
          evil-undo-system 'undo-fu
          evil-disable-insert-state-bindings t
          evil-shift-width ian/indent-width)
    :hook (after-init . evil-mode)
    :config
    (with-eval-after-load 'evil-maps ; avoid conflict with company tooltip selection
      (define-key evil-insert-state-map (kbd "C-n") nil)
      (define-key evil-insert-state-map (kbd "C-p") nil)
      (keymap-set evil-window-map "_" #'split-window-vertically)
      (keymap-set evil-window-map "|" #'split-window-horizontally)
      (evil-set-initial-state 'org-agenda-mode 'normal)
      )
    )
#+END_SRC
Evil-collection covers more parts of Emacs that the original Evil
doesn't support (e.g. Packages buffer, eshell, calendar etc.)
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-company-use-tng nil)
    (evil-collection-init))
#+END_SRC
Emulates tpope's vim commentary package (Use ~gcc~ to comment out a line,
~gc~ to comment out the target of a motion (for example, ~gcap~ to
comment out a paragraph), ~gc~ in visual mode to comment out the
selection etc.)
#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary
    :after evil
    :diminish
    :config (evil-commentary-mode +1))
#+END_SRC
** Multicursor
#+BEGIN_SRC emacs-lisp
  (use-package evil-mc)
  (global-evil-mc-mode  1) ;; enable evil-mc on all buffers
  (evil-define-key 'visual evil-mc-key-map
    "A" #'evil-mc-make-cursor-in-visual-selection-end
    "I" #'evil-mc-make-cursor-in-visual-selection-beg)
#+END_SRC

** Git Integration
Tell magit to automatically put us in vi-insert-mode when committing a change.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status)
    :config (add-hook 'with-editor-mode-hook #'evil-insert-state))
#+END_SRC
** Searching/sorting enhancements & project management
*** Ido, ido-vertical, ido-ubiquitous and fuzzy matching
Selecting buffers/files with great efficiency. In my opinion, Ido is
enough to replace Ivy/Counsel and Helm. We install ido-vertical to get
a better view of the available options (use ~C-n~, ~C-p~ or arrow keys
to navigate). Ido-ubiquitous (from the ~ido-completing-read+~ package)
provides us ido-like completions in describing functions and variables
etc. Fuzzy matching is a nice feature and we have flx-ido for that
purpose.
#+BEGIN_SRC emacs-lisp
  (use-package ido
    :config
    (ido-mode +1)
    (setq ido-everywhere t
          ido-enable-flex-matching t))

  (use-package ido-vertical-mode
    :config
    (ido-vertical-mode +1)
    (setq ido-vertical-define-keys 'C-n-C-p-up-and-down))


  (define-key ido-common-completion-map " " 'self-insert-command)
  (use-package ido-completing-read+ :config (ido-ubiquitous-mode +1))

  (use-package flx-ido :config (flx-ido-mode +1))
#+END_SRC
** Note Taking
*** Org References
#+BEGIN_SRC emacs-lisp
  (use-package org-ref
    :config
    (setq bibtex-completion-bibliography '((concat org-roam-directory "bibliography/references.bib"))
  bibtex-completion-library-path '((concat org-roam-directory "bibliography/pdfs/"))))


#+END_SRC

**** Agenda
**** Org-Roam-Todo
[[https://magnus.therning.org/2021-07-23-keeping-todo-items-in-org-roam-v2.html][Todo list support in org-roam]]!
***** Supporting

#+begin_src emacs-lisp
  (defun roam-extra:get-filetags ()
    (split-string (or (org-roam-get-keyword "filetags") "")))

  (defun roam-extra:add-filetag (tag)
    (let* ((new-tags (cons tag (roam-extra:get-filetags)))
           (new-tags-str (combine-and-quote-strings new-tags)))
      (org-roam-set-keyword "filetags" new-tags-str)))

  (defun roam-extra:del-filetag (tag)
    (let* ((new-tags (seq-difference (roam-extra:get-filetags) `(,tag)))
           (new-tags-str (combine-and-quote-strings new-tags)))
      (org-roam-set-keyword "filetags" new-tags-str)))
#+end_src
***** Layer
#+begin_src emacs-lisp
  (defun roam-extra:todo-p ()
    "Return non-nil if current buffer has any TODO entry.

         TODO entries marked as done are ignored, meaning the this
         function returns nil if current buffer contains only completed
         tasks."
    (org-element-map
        (org-element-parse-buffer 'headline)
        'headline
      (lambda (h)
        (eq (org-element-property :todo-type h)
            'todo))
      nil 'first-match))
  (defun roam-extra:update-todo-tag ()
    "Update TODO tag in the current buffer."
    (when (and (not (active-minibuffer-window))
               (org-roam-file-p))
      (org-with-point-at 1
        (let* ((tags (roam-extra:get-filetags))
               (is-todo (roam-extra:todo-p)))
          (cond ((and is-todo (not (seq-contains-p tags "todo")))
                 (roam-extra:add-filetag "todo"))
                ((and (not is-todo) (seq-contains-p tags "todo"))
                 (roam-extra:del-filetag "todo")))))))
  (defun roam-extra:todo-files ()
    "Return a list of roam files containing todo tag."
    (org-roam-db-sync)
    (let ((todo-nodes (seq-filter (lambda (n)
                                    (seq-contains-p (org-roam-node-tags n) "todo"))
                                  (org-roam-node-list))))
      (seq-uniq (seq-map #'org-roam-node-file todo-nodes))))

  (defun roam-extra:update-todo-files (&rest _)
    "Update the value of `org-agenda-files'."
    (setq org-agenda-files (roam-extra:todo-files)))
  (add-hook 'find-file-hook #'roam-extra:update-todo-tag)
  (add-hook 'before-save-hook #'roam-extra:update-todo-tag)
  (advice-add 'org-agenda :before #'roam-extra:update-todo-files)
#+end_src

#+begin_src emacs-lisp
  (setq org-agenda-file-regexp "\\`[^.].*\\.org\\(\\.gpg\\)?\\'")
  (setq org-todo-keywords
        '((sequence "TODO(t)" "HACK(h)" "|" "DONE(d)" )
          (sequence "NEXT(n)" "WAIT(w)" "START(s)" "|" "KILL(k)" )
          (sequence "PROJECT(p)" "|")
          (sequence "MEDIA(m)" "|" "WATCHED(a)")
          ))
#+end_src

*** Org Roam
#+BEGIN_SRC emacs-lisp
  (require 'ox-md)
    (use-package org-roam :config
      (setq org-roam-directory (file-truename "/home/skye/Notes"))
      (org-roam-db-autosync-mode)
      (setq org-startup-indented "Globally")

      (setq org-roam-completion-system 'ido)
      (define-key mode-specific-map (kbd "r f") 'org-roam-node-find)
      (define-key mode-specific-map (kbd "o r") 'org-roam-node-find)
      (define-key mode-specific-map (kbd "o c") 'org-roam-capture)
      (define-key mode-specific-map (kbd "o i") 'org-id-get-create)
      (define-key mode-specific-map (kbd "r w") 'org-roam-refile)
      (define-key mode-specific-map (kbd "o a") 'org-agenda)
      (define-key org-mode-map (kbd "C-c r n") 'org-roam-capture)
      (define-key org-mode-map (kbd "C-c r t a") 'org-roam-tag-add)
      (define-key org-mode-map (kbd "C-c r t r") 'org-roam-tag-remove)
      (define-key org-mode-map (kbd "C-c r a a") 'org-roam-alias-add)
      (define-key org-mode-map (kbd "C-c r a r") 'org-roam-alias-remove)
      (define-key org-mode-map (kbd "C-c r i") 'org-roam-node-insert)
      (define-key org-mode-map (kbd "C-c C-<return>") 'org-open-at-point)
      (define-key org-mode-map (kbd "C-c <") 'outline-promote)
      (define-key org-mode-map (kbd "C-c >") 'outline-demote)
      (cl-defmethod org-roam-node-my-tags ((node org-roam-node))
        (mapcar (lambda (arg) (concat "#" arg)) (remove "todo" (remove "ATTACH" (org-roam-node-tags node))))
  )
      (setq org-roam-node-display-template
            (concat "${title:90} "
                    (propertize "${tags:10}" 'face 'org-tag)))

      (setq org-roam-capture-templates '(
                                         ("d" "default" plain "%?" :target
                                          (file+head "${slug}.org" "#+title: ${title}\n#+CREATED: %<[%Y-%m-%d]>\n")
                                          :unnarrowed t)
                                         ("p" "private" plain "%?" :target
                                          (file+head "private/${slug}.org" "#+title: ${title}\n#+CREATED: %<[%Y-%m-%d]>\n")
                                          :unnarrowed t)
                                         ("s" "school" plain "%?" :target
                                          (file+head "school/${slug}.org" "#+title: ${title}\n#+CREATED: %<[%Y-%m-%d]>\n#+filetags: :school:\n")
                                          :unnarrowed t)
                                         ("c" "class" plain "%?" :target
                                          (file+head "private/${slug}.org" "#+title: ${title}\n#+filetags: :school:class:\n\n- Teachers\n- TAs\n- Textbooks\n"
                                                     )
                                          :unnarrowed t)
                                         ("m" "stat355" plain "%?" :target
                                          (file+head "school/${slug}.org" "#+title: ${title}\n#+CREATED: %<[%Y-%m-%d]>\n#+filetags: :school:stat355:stat:\n")
                                          :unnarrowed t)
                                         ("r" "reminder" entry "** TODO %?\n%a" :target
                                          (file+olp "private/todo.org" ("reminders"))
                                          :unnarrowed nil)
                                         )
            )
      (setq org-clock-persist t)
      (setq org-roam-completion-ignore-case t)
      (org-clock-persistence-insinuate))

#+END_SRC

**** Don't bother with nodes with the HIDE tag

Primarily this is used for nodes that need an ID for attachments, but that shouldn't be
used as actual nodes.

#+begin_src emacs-lisp
(setq org-roam-db-node-include-function
      (lambda ()
        (not (member "HIDE" (org-get-tags)))))
#+end_src

*** Org Exporting
**** Project Publishing Configuration
#+begin_src emacs-lisp
  (setq wiki-export-directory "/srv/pub/")
#+end_src
***** Configuration for ID resolution
These magic words let org publish ID links correctly.
#+begin_src emacs-lisp
  (require 'find-lisp)
  (setq org-id-extra-files (find-lisp-find-files org-roam-directory "\.org$"))
#+end_src
***** Backlinks
The following strings are used to generate backlinks on export, taken from [[id:06203980-765f-4afc-807f-65de058c1a46][doubleloop]].

Set "org-export-do-backlinks" to non-nil to activate this feature.
#+begin_src emacs-lisp
  (setq org-export-do-backlinks nil)
  (defun collect-backlinks-string (backend)
    "Insert backlinks into the end of the org file before parsing it."
    (when org-export-do-backlinks
      (when (org-roam-node-at-point)
        (goto-char (point-max))
        ;; Add a new header for the references
        (insert "\n* Backlinks \n:PROPERTIES:\n:HTML_CONTAINER_CLASS: backlinks\n:END:\n")
        (let* ((backlinks (org-roam-backlinks-get (org-roam-node-at-point))))
          (dolist (backlink backlinks)
            (let* ((source-node (org-roam-backlink-source-node backlink))
                   (point (org-roam-backlink-point backlink)))
              (insert
               (format "- [[./%s][%s]]\n"
                       (file-name-nondirectory (org-roam-node-file source-node))
                       (org-roam-node-title source-node)))))))))

  (defun org-roam--backlinks-list (file)
    (if (org-roam-file-p file)
        (--reduce-from
         (concat acc (format "- [[file:%s][%s]\n"
                             (file-relative-name (car it) org-roam-directory)
                             (org-roam-db--get-title (car it))))
         "" (org-roam-db-query [:select [source] :from links :where (= dest $s1)] file))
      ""))

  (defun org-export-preprocessor (backend)
    (let ((links (org-roam--backlinks-list (buffer-file-name))))
      (unless (string= links "")
        (save-excursion
          (goto-char (point-max))
          (insert (concat "\n* Elsewhere in the garden\n\nNotes that link to this note (AKA [[file:backlinks.org][backlinks]]).\n") links)))))

  (add-hook 'org-export-before-processing-hook 'collect-backlinks-string)

#+end_src

***** Projects
Often stolen from [[https://gitlab.com/ngm/commonplace/-/blob/master/publish.el][Neil M's commonplace]] with minor edits.
#+begin_src emacs-lisp
  (setq wiki-export-directory "~/Public/")
  (setq org-publish-project-alist `(
                                    ("wiki"
                                     :components ("wiki-notes" "wiki-static"))
                                    ("wiki-notes"
                                     :base-directory ,org-roam-directory
                                     :base-extension "org"
                                     :publishing-directory ,wiki-export-directory
                                     :publishing-function org-html-publish-to-html
                                     :recursive t
                                     ;; :headline-levels 4
                                     :with-toc t
                                     :html-doctype "html5"
                                     ;; :html-preamble ,commonplace/preamble
                                     ;; :html-postamble ,commonplace/postamble
                                     ;; :html-head-include-scripts nil
                                     ;; :html-head-include-default-style nil
                                     :html-link-home "/"
                                     ;; This will directly include the style into the HTML, making it much more portable.
                                     :html-head-extra ,(concat "<style>" (with-temp-buffer (insert-file-contents (concat org-roam-directory "/style/style.css")  ) (buffer-string)) "</style>")
                                     :html-container "section"
                                     :htmlized-source nil
                                     :auto-sitemap t
                                     :section-numbers nil
                                     :exclude "private"
                                     :sitemap-title "Recent changes"
                                     :sitemap-sort-files anti-chronologically
                                     :sitemap-filename "index.org"
                                     ;; :html-self-link-headlines t
                                     )
                                    ("wiki-static"
                                     :base-directory ,org-roam-directory
                                     :base-extension "scss\\|css\\|js\\|png\\|jpg\\|gif\\|svg\\|svg\\|json\\|pdf\\|ttf\\|bib"
                                     :publishing-directory ,wiki-export-directory
                                     :exclude "node_modules"
                                     :recursive t
                                     :publishing-function org-publish-attachment)
#+end_src

****** Ending
#+begin_src emacs-lisp
  ))
#+end_src

***** Publish Key-binds
- Note taken on [2022-04-12 Tue 14:16]
[[id:77c8197f-3175-4829-b0d8-41805003442a][Spacemacs]] doesn't seem to offer any easy org-roam keybinds for publishing, so I added some!
#+begin_src emacs-lisp
  (defun org-publish-extra-rebuild (name) "Rebuild the given project completely" (interactive)
         (list (org-publish-remove-all-timestamps) (org-publish name t)))
  (defun org-publish-force-wiki () "Force rebuild the wiki project" (interactive)
         (org-publish-extra-rebuild "wiki"))

  (define-key org-mode-map (kbd "C-c r p p") 'org-publish-current-file)
  (define-key org-mode-map (kbd "C-c r p P") 'org-publish-current-project)
#+end_src
Force publish is intentionally signficantly harder to execute, as to avoid running it by accident.
#+begin_src emacs-lisp
  (define-key org-mode-map (kbd "C-c r p C-f") 'org-publish-force-wiki)
#+end_src

***** Programming language support and utilities
****** Org Babel
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)(haskell . t)(R . t)))
#+END_SRC

****** Company for auto-completion
Use ~C-n~ and ~C-p~ to navigate the tooltip.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :hook (prog-mode . company-mode)
    :config
    (setq company-minimum-prefix-length 1
          company-idle-delay 0.1
          company-selection-wrap-around t
          company-tooltip-align-annotations t
          company-frontends '(company-pseudo-tooltip-frontend ; show tooltip even for single candidate
                              company-echo-metadata-frontend)
          )

    (add-to-list 'company-backends 'company-capf 'company-ispell)
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous))
  (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

****** Flycheck
A modern on-the-fly syntax checking extension -- absolute essential
#+BEGIN_SRC emacs-lisp
  (use-package flycheck :config (global-flycheck-mode +1))
#+END_SRC

****** Flyspell
#+BEGIN_SRC emacs-lisp
  (setq flyspell-issue-message-flag nil)
  (dolist (hook '(text-mode-hook org-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))
  (dolist (hook '(change-log-mode-hook log-edit-mode-hook))
    (add-hook hook (lambda () (flyspell-mode -1))))
#+END_SRC

****** LanguageTool
A tool to check grammar and such things, very useful if you're using emacs for essays.

#+begin_src emacs-lisp
  (when (or (file-directory-p "/usr/share/languagetool") (file-directory-p "/usr/share/java/languagetool/") )
    (setq langtool-java-classpath
          "/usr/share/languagetool:/usr/share/java/languagetool/*")
    (require 'langtool)
    )


#+end_src

****** Org Mode
Some minimal org mode tweaks: org-bullets gives our headings (h1, h2,
h3...) a more visually pleasing look.
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets :hook (org-mode . org-bullets-mode))
#+END_SRC

****** Useful major modes
Markdown mode and Web mode, the latter covers our usages of HTML/CSS/JS/JSX/TS/TSX/JSON.
#+BEGIN_SRC emacs-lisp
  (use-package geiser-racket :ensure t)
  (use-package haskell-mode)
  (use-package go-mode)
  (use-package rustic)
  (use-package markdown-mode
    :hook (markdown-mode . visual-line-mode))
  (use-package ess
    :ensure t
    :init (require 'ess-site))

  (use-package web-mode
    :mode (("\\.html?\\'" . web-mode)
           ("\\.css\\'"   . web-mode)
           ("\\.jsx?\\'"  . web-mode)
           ("\\.tsx?\\'"  . web-mode)
           ("\\.json\\'"  . web-mode))
    :config
    (setq web-mode-markup-indent-offset 2) ; HTML
    (setq web-mode-css-indent-offset 2)    ; CSS
    (setq web-mode-code-indent-offset 2)   ; JS/JSX/TS/TSX
    (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'"))))
#+END_SRC

****** Github Copilot
#+BEGIN_SRC emacs-lisp :tangle nil
  (use-package copilot
    :straight (:host github :repo "zerolfx/copilot.el" :files ("dist" "*.el"))
    :ensure t)
  ;; you can utilize :map :hook and :config to customize copilot
  (add-hook 'prog-mode-hook 'copilot-mode)
  (with-eval-after-load 'company
    ;; disable inline previews
    (delq 'company-preview-if-just-one-frontend company-frontends))

  (define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion)
  (define-key copilot-completion-map (kbd "TAB") 'copilot-accept-completion)
#+END_SRC

#+RESULTS:
: copilot-accept-completion

****** Mediawiki
A major mode that lets you edit mediawiki instances.
#+begin_src emacs-lisp
  (use-package mediawiki)
#+end_src

******* Mediawiki Org Export
Allows org to export to mediawiki.

#+begin_src emacs-lisp
  (use-package ox-mediawiki)
#+end_src

****** C++
#+begin_src emacs-lisp
  (use-package clang-format)
  (setq clang-format-style "file")
  (use-package cc-mode :config
    (add-hook 'c-mode-common-hook
    (lambda()
  (setq ff-search-directories '("../" "../lib/" "../include/" "."))

        (local-set-key  (kbd "C-c h") 'ff-find-other-file)))
  (define-key c++-mode-map (kbd "C-M-\\") 'clang-format-buffer))
#+end_src

#+RESULTS:
: t

****** LSP
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :hook
    ((python-mode . lsp)
     (c-mode . lsp)
     (c++-mode . lsp)
     (lsp-mode . lsp-enable-which-key-integration))

    :bind (:map evil-normal-state-map
                ("gh" . lsp-describe-thing-at-point))
    :config
    (define-key lsp-mode-map (kbd "C-c C-l") lsp-command-map)
    (define-key lsp-mode-map (kbd "C-c C-c") 'lsp-execute-code-action))

  (use-package lsp-ui
    :config (setq lsp-ui-sideline-show-hover t
                  lsp-ui-sideline-delay 0.5
                  lsp-ui-doc-delay 5
                  lsp-ui-sideline-ignore-duplicates t
                  lsp-ui-doc-position 'bottom
                  lsp-ui-doc-alignment 'frame
                  lsp-ui-doc-header nil
                  lsp-ui-doc-include-signature t
                  lsp-ui-doc-use-childframe t)
    :commands lsp-ui-mode
    :bind (:map evil-normal-state-map
                ("gd" . lsp-ui-peek-find-definitions)
                ("gr" . lsp-ui-peek-find-references)
                ))

#+END_SRC

#+RESULTS:
: lsp-ui-peek-find-references

***** Miscellaneous
****** Diminish minor modes
The diminish package is used to hide unimportant minor modes in the
modeline. It provides the ~:diminish~ keyword we've been using in
other use-package declarations.
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :demand t)
#+END_SRC
****** Which-key
Provides us with hints on available keystroke combinations.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode +1)
    (setq which-key-idle-delay 0.4
          which-key-idle-secondary-delay 0.4))
#+END_SRC
****** Configure PATH on macOS
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :config (when (memq window-system '(mac ns x))
              (exec-path-from-shell-initialize)))
#+END_SRC
****** Yaml Mode
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode)
  (use-package puppet-mode)
#+END_SRC
****** Dark/light handling
#+BEGIN_SRC emacs-lisp
  (defun +theme-dark ()
    (load-theme 'doom-dracula t))
  (defun +theme-light ()
    (load-theme 'doom-solarized-light t))
#+END_SRC
****** Keychain support
#+BEGIN_SRC emacs-lisp
(use-package keychain-environment)
(keychain-refresh-environment)
#+END_SRC
** Pseudocode-mode

#+begin_src emacs-lisp
(straight-use-package
 '(pseudocode-mode :type git :host github :repo "skyethepinkcat/pseudocode-mode"))


#+end_src
** Yasnippet
#+begin_src emacs-lisp
    (use-package yasnippet-snippets
  :config (yas-global-mode 1)
  )
#+end_src
